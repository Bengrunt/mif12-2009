%{
#include "globals.hpp"

/* Ressources internes. */
TableDesIdentificateurs ti; /**< Table des indentificateurs. */
TableDesSymboles ts; /**< Table des symboles. */
%}
/* Mots clefs du langage */
%token KW_TYPE
%token KW_PROGRAM
%token KW_PROCEDURE
%token KW_FUNCTION
%token KW_VAR
%token KW_CONST
%token KW_BEGIN
%token KW_END
%token KW_INTEGER
%token KW_REAL
%token KW_BOOLEAN
%token KW_CHAR
%token KW_STRING
%token KW_ARRAY
%token KW_PTR
%token KW_OF
%token KW_RECORD
%token KW_DIV
%token KW_MOD
%token KW_AND
%token KW_OR
%token KW_XOR
%token KW_NOT
%token KW_FOR
%token KW_TO
%token KW_REPEAT
%token KW_UNTIL
%token KW_WHILE
%token KW_DO
%token KW_ELSE
%token KW_IF
%token KW_THEN
%token KW_DOWNTO

/* Séparateurs du langage */
%token SEP_SCOL
%token SEP_DOT
%token SEP_COL
%token SEP_COMMA
%token SEP_DOTDOT
%token SEP_CO
%token SEP_CF
%token SEP_PO
%token SEP_PF


/* Opérateurs. */
%token OP_EQ
%token OP_NEQ
%token OP_LT
%token OP_LTE
%token OP_GT
%token OP_GTE
%token OP_ADD
%token OP_SUB
%token OP_MUL
%token OP_SLASH
%token OP_EXP
%token OP_PTR
%token OP_AFFECT

/* Element */
%token TOK_IDENT
%token TOK_INTEGER
%token TOK_REAL
%token TOK_PTR
%token TOK_STRING
%token TOK_CHAR

/* Point de départ */
%start Program

%union {
  Type* type;
  ListeIdentificateurs* li;
  TypeInterval::Boundary bound;
  std::vector<TypeInterval*>* lti;
  TypeInterval* ti;
  TypePointer* tp;
  TypeArray* ta;
}

%type<type> Type
%type<type> UserType
%type<type> BaseType
%type<li> ListIdent
%type<bound> InterBase
%type<ti> InterType
%type<ti> ArrayIndex
%type<tp> PointerType
%type<ta> ArrayType
%type<lti> ListArrayIndex

%%
/* Programme */
Program			:	ProgramHeader SEP_SCOL Block SEP_DOT
				;

/* En-tête du programme */
ProgramHeader	:	KW_PROGRAM TOK_IDENT {
						try{ti.add(yytext);}
						catch(AllocationException e) {
							std::cerr << e.what() << std::endl;
							exit(EXIT_FAILURE);
						}
						ts.add(new Program());
					}
				;

/* Bloc de programme, procédure ou fonction */
Block			:	BlockDeclVar BlockCode
				;
/* Bloc de déclaration de constantes */
BlockDeclConst : KW_CONST ListDeclConst
               |
               ;

ListDeclConst  : ListDeclConst DeclConst
               | DeclConst
               ;

DeclConst      : TOK_IDENT OP_EQ Expression SEP_SCOL
               ;

/* Bloc de déclaration de variables */
BlockDeclVar 	:	KW_VAR ListDeclVar
				|
				;

/* Liste de déclaration de variables */		
ListDeclVar		:	ListDeclVar DeclVar
				|	DeclVar
				;

/* Bloc de déclaration de type utilisateur. */
BlockDeclType  : KW_TYPE ListDeclType
               |
               ;

ListDeclType   : ListDeclType DeclType
               | DeclType
               ;

DeclType       : TOK_IDENT SEP_COL Type SEP_SCOL
               ;

/* Déclaration de variables */
BlockDeclVar   :    KW_VAR ListDeclVar
               |
               ;
ListDeclVar    :    ListDeclVar DeclVar
               |    DeclVar
               ;
DeclVar		   :	ListIdent SEP_COL Type SEP_SCOL {
						for(
							unsigned int i = 0;
							i < $1->size();
							i++
						) {
							try{ti.add($1->get(i));}
							catch(AllocationException e) {
								std::cerr << e.what() << std::endl;
								exit(EXIT_FAILURE);
							}
							ts.add(new Variable($3));
						}
						delete $1;
						$1 = NULL;
					}
				;

/* Liste d'identificateurs */
ListIdent		:	ListIdent SEP_COMMA TOK_IDENT {
						$$ = $1;
						try{$$->add(yytext);}
						catch(AllocationException e) {
							std::cerr << e.what() << std::endl;
							exit(EXIT_FAILURE);
						}
					}
				|	TOK_IDENT {
						$$ = new ListeIdentificateurs();
						try{$$->add(yytext);}
						catch(AllocationException e) {
							std::cerr << e.what() << std::endl;
							exit(EXIT_FAILURE);
						}
					}
				;

/* Bloc de fonctions. */
BlockDeclFunc : ListDeclFunc SEP_SCOL
               |
               ;

ListDeclFunc   : ListDeclFunc SEP_SCOL DeclFunc
               | DeclFunc
               ;

DeclFunc       : ProcDecl
               | FuncDecl
               ;

ProcDecl       : ProcHeader SEP_SCOL Block
               ;

ProcHeader     : ProcIdent
               | ProcIdent FormalArgs
               ;

ProcIdent      : KW_PROCEDURE TOK_IDENT
               ;

FormalArgs     : SEP_PO ListFormalArgs SEP_PF
               ;

ListFormalArgs : ListFormalArgs SEP_SCOL FormalArg
               | FormalArg
               ;

FormalArg      : ValFormalArg
               | VarFormalArg
               ;

ValFormalArg   : ListIdent SEP_COL TOK_IDENT
               ;

VarFormalArg   : KW_VAR ListIdent SEP_COL TOK_IDENT
               ;

ProcDecl       : ProcHeader SEP_SCOL Block
               ;
			   
FuncDecl	   : FuncHeader SEP_SCOL Block
			   ;
FuncHeader     : FuncIdent FuncResult
               | FuncIdent FormalArgs FuncResult
               ;

FuncIdent      : KW_FUNCTION TOK_IDENT
               ;

FuncResult     : SEP_COL TOK_IDENT
               ;
/* Type de base */
Type           : /* Fait buguer les intervalles ?!?  TOK_IDENT
			   | */ UserType		{$$ = $1;}
			   | BaseType		{$$ = $1;}
               ;
			   
BaseType		:	KW_INTEGER		{$$ = new TypeInteger();}
				|	KW_REAL			{$$ = new TypeReal();}
				|	KW_BOOLEAN		{$$ = new TypeBoolean();}
				|	KW_CHAR			{$$ = new TypeChar();}
				|	KW_STRING		{$$ = new TypeString();}
				;

UserType       : EnumType
               | InterType		{$$ = $1;}
               | ArrayType		{$$ = $1;}
               | RecordType
               | PointerType	{$$ = $1;}
               ;
               ;

EnumType       : SEP_PO ListIdent SEP_PF
               ;

/* Intervalle. */
InterType      : InterBase SEP_DOTDOT InterBase {$$ = new TypeInterval($1, $3);}
               ;
InterBase    :   TOK_INTEGER		{$$.id = false; $$.data.iVal = atoi(yytext);}
               | OP_SUB TOK_INTEGER	{$$.id = false; $$.data.iVal = -atoi(yytext);}
			   | TOK_CHAR			{$$.id = false; $$.data.iVal = (int) yytext[1];}
			   | TOK_IDENT			{$$.id = true; $$.data.id = ti.getId(yytext);}
			   ;
			   
ArrayType      : KW_ARRAY SEP_CO ListArrayIndex SEP_CF KW_OF Type {
					$$ = new TypeArray($6, $3);
				}
               ;

ListArrayIndex	:	ListArrayIndex SEP_COMMA ArrayIndex {
						$1->push_back($3);
						$$ = $1;
					}
				|	ArrayIndex {
						std::vector<TypeInterval*>* intervals = new std::vector<TypeInterval*>;
						intervals->push_back($1);
						$$ = intervals;
					}
				;
			   
ArrayIndex     : TOK_IDENT	
               | InterType {$$ = $1;}
               ;

RecordType     : KW_RECORD RecordFields KW_END
               ;

RecordFields   : RecordFields SEP_SCOL RecordField
               | RecordField
               ;

RecordField    : ListIdent SEP_COL Type
               ;

/*PointerType    : OP_PTR TOK_IDENT	*/
PointerType    : OP_PTR Type	{$$ = new TypePointer($2);}
               ;

/* Bloc de code */
BlockCode      : KW_BEGIN ListInstr KW_END
               ;

ListInstr      : ListInstr SEP_SCOL Instr
               | Instr
               ;

Instr          : KW_WHILE Expression KW_DO Instr
               | KW_REPEAT ListInstr KW_UNTIL Expression
               | KW_FOR TOK_IDENT OP_AFFECT Expression ForDirection Expression KW_DO Instr
               | KW_IF Expression KW_THEN Instr
               | KW_IF Expression KW_THEN Instr KW_ELSE Instr
               | VarExpr OP_AFFECT Expression
               | Call
               | BlockCode
               ;

ForDirection   : KW_TO
               | KW_DOWNTO
               ;

/* Expressions */
Expression     : MathExpr
               | CompExpr
               | BoolExpr
               | AtomExpr
               | VarExpr
               ;

MathExpr       : Expression OP_ADD Expression
               | Expression OP_SUB Expression
               | Expression OP_MUL Expression
               | Expression OP_SLASH Expression
               | Expression KW_DIV Expression
               | Expression KW_MOD Expression
               | OP_SUB Expression
               | OP_ADD Expression
               ;

CompExpr       : Expression OP_EQ Expression
               | Expression OP_NEQ Expression
               | Expression OP_LT Expression
               | Expression OP_LTE Expression
               | Expression OP_GT Expression
               | Expression OP_GTE Expression
               ;

BoolExpr       : Expression KW_AND Expression
               | Expression KW_OR Expression
               | Expression KW_XOR Expression
               | KW_NOT Expression
               ;

AtomExpr       : SEP_PO Expression SEP_PF
               | Call
               | TOK_INTEGER
               | TOK_REAL
               | KW_PTR
               | TOK_STRING
               ;

VarExpr        : TOK_IDENT
               | VarExpr SEP_CO Expression SEP_CF
               | VarExpr SEP_DOT TOK_IDENT
               | VarExpr OP_PTR
               ;

Call           : TOK_IDENT Parameters
               ;

Parameters     : SEP_PO ListParameters SEP_PF
               ;

ListParameters : ListParameters SEP_COMMA Expression
               | Expression
               ;
%%
